# 文件名: .github/workflows/convert.yml (最终修复版 v3)

name: Convert Gist YAML to Surge Format

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      GIST_ID: "41d83386c3f8a59a928e74c78d48cef1"
      YAML_FILENAME: "all.yaml"
      SURGE_FILENAME: "surge_config.txt"
      GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install pyyaml

      - name: Fetch, Convert, and Set Output
        run: |
          YAML_URL=$(gh api "gists/${{ env.GIST_ID }}" --jq ".files[\"${{ env.YAML_FILENAME }}\"].raw_url")
          if [ -z "$YAML_URL" ] || [ "$YAML_URL" == "null" ]; then
            echo "Error: Could not find file '${{ env.YAML_FILENAME }}' in Gist or get its URL."
            exit 1
          fi
          echo "Found YAML file URL: $YAML_URL"
          YAML_CONTENT=$(curl -sL "$YAML_URL")

          cat << 'EOF' > converter.py
          import yaml, sys
          def parse_proxy(proxy):
              if not proxy or not isinstance(proxy, dict): return None
              proxy_type = proxy.get('type')
              if not proxy_type: return None
              name = proxy.get('name', 'Unnamed')
              params = [proxy_type, str(proxy.get('server', '')), str(proxy.get('port', ''))]
              if proxy_type == 'trojan':
                  params.append(f"password={proxy.get('password', '')}")
              elif proxy_type in ['vless', 'vmess']:
                  params.append(f"uuid={proxy.get('uuid', '')}")
                  if proxy_type == 'vmess': params.append(f"alterId={proxy.get('alterId', '0')}")
              elif proxy_type == 'hysteria2':
                  auth_pass = proxy.get('password') or proxy.get('auth') or proxy.get('auth-str') or ""
                  params.append(f"password={auth_pass}")
              if proxy.get('network') == 'ws':
                  params.append('ws=true')
                  ws_opts = proxy.get('ws-opts', {})
                  ws_path = ws_opts.get('path', '/')
                  params.append(f'ws-path={ws_path}')
                  if 'headers' in ws_opts and 'Host' in ws_opts['headers']:
                      host = ws_opts['headers']['Host']
                      params.append(f'ws-headers=Host:{host}')
              if proxy.get('tls', False): params.append('tls=true')
              sni = proxy.get('sni') or proxy.get('servername')
              if sni: params.append(f'sni={sni}')
              if proxy.get('skip-cert-verify', False): params.append('skip-cert-verify=true')
              return f"{name} = {','.join(params)}"
          def main():
              yaml_content = sys.stdin.read()
              if not yaml_content: return
              try:
                  data = yaml.safe_load(yaml_content)
                  if 'proxies' not in data or not isinstance(data.get('proxies'), list): return
                  for proxy in data['proxies']:
                      if proxy:
                          surge_line = parse_proxy(proxy)
                          if surge_line: print(surge_line)
              except Exception as e:
                  print(f'Error processing YAML: {e}', file=sys.stderr)
                  sys.exit(1)
          if __name__ == '__main__': main()
          EOF

          echo "$YAML_CONTENT" | python converter.py > surge_result.txt
          echo "output_path=surge_result.txt" >> $GITHUB_ENV

      # --- 步骤 2: 更新 Gist（已添加 --add 参数） ---
      - name: Update Gist using GitHub CLI
        run: |
          gh gist edit ${{ env.GIST_ID }} --add --filename ${{ env.SURGE_FILENAME }} ${{ env.output_path }}
