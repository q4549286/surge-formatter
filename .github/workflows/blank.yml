# 文件名: .github/workflows/convert.yml (最终修复版)

name: Convert Gist YAML to Surge Format

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      GIST_ID: "41d83386c3f8a59a928e74c78d48cef1"
      YAML_FILENAME: "all.yaml"
      SURGE_FILENAME: "surge_config.txt"
      # 使用 GITHUB_TOKEN 是 gh 命令的标准做法
      GITHUB_TOKEN: ${{ secrets.GIST_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install pyyaml

      # --- 步骤 1: 获取 Gist 内容并执行转换 ---
      - name: Fetch Gist and Run Python Converter
        id: converter # 给步骤一个id，以便后续引用其输出
        run: |
          # 1. 使用官方 gh cli 可靠地获取 Gist 文件内容，并将其通过管道 (|) 传递给 Python 脚本
          # 2. Python 脚本从标准输入 (stdin) 读取内容，不再需要自己下载
          # 3. 这彻底解决了 "404 Not Found" 的问题
          gh gist view ${{ env.GIST_ID }} --file ${{ env.YAML_FILENAME }} --raw | \
          python -c "
          import yaml, sys, os

          # Python 脚本本身保持不变，但现在从 sys.stdin 读取输入
          def parse_proxy(proxy):
              if not proxy or not isinstance(proxy, dict): return None
              proxy_type = proxy.get('type')
              if not proxy_type: return None
              name = proxy.get('name', 'Unnamed')
              params = [proxy_type, str(proxy.get('server', '')), str(proxy.get('port', ''))]
              if proxy_type == 'trojan':
                  params.append(f\"password={proxy.get('password', '')}\")
              elif proxy_type in ['vless', 'vmess']:
                  params.append(f\"uuid={proxy.get('uuid', '')}\")
                  if proxy_type == 'vmess': params.append(f\"alterId={proxy.get('alterId', '0')}\")
              elif proxy_type == 'hysteria2':
                  auth_pass = proxy.get('password') or proxy.get('auth') or proxy.get('auth-str') or \"\"
                  params.append(f\"password={auth_pass}\")
              if proxy.get('network') == 'ws':
                  params.append('ws=true')
                  ws_opts = proxy.get('ws-opts', {})
                  ws_path = ws_opts.get('path', '/')
                  params.append(f'ws-path={ws_path}')
                  if 'headers' in ws_opts and 'Host' in ws_opts['headers']:
                      host = ws_opts['headers']['Host']
                      params.append(f'ws-headers=Host:{host}')
              if proxy.get('tls', False): params.append('tls=true')
              sni = proxy.get('sni') or proxy.get('servername')
              if sni: params.append(f'sni={sni}')
              if proxy.get('skip-cert-verify', False): params.append('skip-cert-verify=true')
              return f'{name} = {', '.join(params)}'

          def main():
              local_output_file = 'surge_result.txt'
              try:
                  # 从标准输入读取由 gh 命令传入的内容
                  yaml_content = sys.stdin.read()
                  if not yaml_content:
                      print('Warning: Received empty content from Gist.', file=sys.stderr)
                      open(local_output_file, 'w').close()
                      return

                  data = yaml.safe_load(yaml_content)
                  if 'proxies' not in data or not isinstance(data.get('proxies'), list):
                      print(\"Warning: 'proxies' list not found. Creating empty output.\", file=sys.stderr)
                      open(local_output_file, 'w').close()
                  else:
                      with open(local_output_file, 'w', encoding='utf-8') as f:
                          for proxy in data['proxies']:
                              if proxy: # 增加一个检查，防止列表中的空项导致错误
                                  surge_line = parse_proxy(proxy)
                                  if surge_line: f.write(surge_line + '\\n')
                  print(f'Conversion successful. Output written to {local_output_file}')
              except Exception as e:
                  print(f'Error processing YAML content: {e}', file=sys.stderr); sys.exit(1)
          
          if __name__ == '__main__':
              main()
          " > surge_result.txt # 将Python脚本的打印输出重定向到结果文件

          # --- 步骤 2: 使用新的方法设置输出变量 ---
          # 这修复了 set-output 的弃用警告
          echo "output_path=surge_result.txt" >> $GITHUB_ENV
          
      # --- 步骤 3: 更新 Gist，此部分保持不变 ---
      - name: Update Gist using GitHub CLI
        run: |
          gh gist edit ${{ env.GIST_ID }} --filename ${{ env.SURGE_FILENAME }} ${{ env.output_path }}
